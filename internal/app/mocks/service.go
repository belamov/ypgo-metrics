// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/belamov/ypgo-metrics/internal/app/services (interfaces: MetricServiceInterface)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/belamov/ypgo-metrics/internal/app/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricServiceInterface is a mock of MetricServiceInterface interface.
type MockMetricServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMetricServiceInterfaceMockRecorder
}

// MockMetricServiceInterfaceMockRecorder is the mock recorder for MockMetricServiceInterface.
type MockMetricServiceInterfaceMockRecorder struct {
	mock *MockMetricServiceInterface
}

// NewMockMetricServiceInterface creates a new mock instance.
func NewMockMetricServiceInterface(ctrl *gomock.Controller) *MockMetricServiceInterface {
	mock := &MockMetricServiceInterface{ctrl: ctrl}
	mock.recorder = &MockMetricServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricServiceInterface) EXPECT() *MockMetricServiceInterfaceMockRecorder {
	return m.recorder
}

// GetAllMetrics mocks base method.
func (m *MockMetricServiceInterface) GetAllMetrics(arg0 context.Context) ([]models.CounterMetric, []models.GaugeMetric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMetrics", arg0)
	ret0, _ := ret[0].([]models.CounterMetric)
	ret1, _ := ret[1].([]models.GaugeMetric)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllMetrics indicates an expected call of GetAllMetrics.
func (mr *MockMetricServiceInterfaceMockRecorder) GetAllMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMetrics", reflect.TypeOf((*MockMetricServiceInterface)(nil).GetAllMetrics), arg0)
}

// GetCounterMetric mocks base method.
func (m *MockMetricServiceInterface) GetCounterMetric(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCounterMetric", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCounterMetric indicates an expected call of GetCounterMetric.
func (mr *MockMetricServiceInterfaceMockRecorder) GetCounterMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCounterMetric", reflect.TypeOf((*MockMetricServiceInterface)(nil).GetCounterMetric), arg0, arg1)
}

// GetGaugeMetric mocks base method.
func (m *MockMetricServiceInterface) GetGaugeMetric(arg0 context.Context, arg1 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGaugeMetric", arg0, arg1)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGaugeMetric indicates an expected call of GetGaugeMetric.
func (mr *MockMetricServiceInterfaceMockRecorder) GetGaugeMetric(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGaugeMetric", reflect.TypeOf((*MockMetricServiceInterface)(nil).GetGaugeMetric), arg0, arg1)
}

// UpdateCounterMetric mocks base method.
func (m *MockMetricServiceInterface) UpdateCounterMetric(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounterMetric", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCounterMetric indicates an expected call of UpdateCounterMetric.
func (mr *MockMetricServiceInterfaceMockRecorder) UpdateCounterMetric(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounterMetric", reflect.TypeOf((*MockMetricServiceInterface)(nil).UpdateCounterMetric), arg0, arg1, arg2)
}

// UpdateGaugeMetric mocks base method.
func (m *MockMetricServiceInterface) UpdateGaugeMetric(arg0 context.Context, arg1 string, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGaugeMetric", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGaugeMetric indicates an expected call of UpdateGaugeMetric.
func (mr *MockMetricServiceInterfaceMockRecorder) UpdateGaugeMetric(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGaugeMetric", reflect.TypeOf((*MockMetricServiceInterface)(nil).UpdateGaugeMetric), arg0, arg1, arg2)
}
